y = stroke$score
sims = bslm_sample(y = y,x = x,ran.wal.sd = 0.0001)
par(mfrow=c(2,2))
monitor(sims)
mcmc_trace(sims)
mcmc_acf(sims)
mcmc_hist(sims)
mcmc_intervals(sims)
par(mfrow=c(2,2))
monitor(sims)
mcmc_trace(sims)
mcmc_acf(sims)
mcmc_hist(sims)
mcmc_intervals(sims)
mcmc_trace(sims)
mcmc_intervals(sims)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse,truncnorm,bayesplot,rstan,gee)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse,truncnorm,bayesplot,rstan,gee)
mo1 = gee(data = stroke,score~week,id = subject,corstr = "exchangeable")
summary(mo1)
summary(mo1)
bslm_sample <- function (y, x, prior_coef = NULL, prior_disp = NULL,
chains = 4, iter = 2000, warmup = floor(iter / 2),ran.wal.sd) {
nvars <- ncol(x); nobs <- nrow(x)
dn <- colnames(x); if (is.null(dn)) dn <- paste0("x", 1L:nvars)
if (is.null(prior_coef))
prior_coef <- list(mean = rep(0, nvars), precision = rep(0, nvars))
if (is.null(prior_disp))
prior_disp <- list(df = 0, scale = 0)
S_inv0 <- prior_coef$precision
beta0 <- prior_coef$mean
beta0 <- if (is.vector(S_inv0)) S_inv0 * beta0 else S_inv0 %*% beta0
nu <- prior_disp$df
nu_tau2 <- nu * prior_disp$scale
rho0 = 0.1
rrho0 = rho.bui(rho = rho0,n = nobs)
c = chol(rrho0)
cp = solve(t(c))
y.t = cp %*% y
x.t = cp %*% x
rss <- sum((y.t - mean(y.t)) ^ 2)
sigma2 <- (nu_tau2 + rss) / (nu + nobs)
sims <- mcmc_array(iter - warmup, chains, c(dn, "sigma", "lp__", "Rho","Rep_y"))
for (chain in 1:chains) {
for (it in 1:iter) {
z <- crossprod(x.t, y.t) / sigma2 + beta0
V_inv <- crossprod(x.t) / sigma2
if (is.vector(S_inv0)) # diagonal precision?
diag(V_inv) <- diag(V_inv) + S_inv0
else
V_inv <- V_inv + S_inv0
c =  C <- chol(V_inv)
u <- backsolve(C, z, transpose = TRUE)
coef <- drop(backsolve(C, u + rnorm(nvars)))
rss <- sum((y.t - drop(x.t %*% coef)) ^ 2)
sigma2 <- rinvchisq(1, nu + nobs, nu_tau2 + rss)
ratio = ratio(rho0 = rho0,sigma = sigma2,beta = coef,x = x,y = y,ran.wal.sd = ran.wal.sd)
a = runif(1)
if(ratio$ratio >a){
rho0 = ratio$rho1
}
rrho0 = rho.bui(rho = rho0,n = nobs)
c = chol(rrho0)
cp = solve(t(c))
y.t = cp %*% y
x.t = cp %*% x
repy = x%*%coef
lp <- -((nu + nobs) / 2 + 1) * log(sigma2) - .5 * (nu_tau2 + rss) / sigma2
if (it > warmup)
sims[it - warmup, chain, ] <- c(coef, sqrt(sigma2), lp, rho0,repy)
}
}
sims
}
stroke = read.csv("stroke.csv")
x = model.matrix(data = stroke,score~week)
y = stroke$score
sims = bslm_sample(y = y,x = x,ran.wal.sd = 0.0001)
bslm_sample <- function (y, x, prior_coef = NULL, prior_disp = NULL,
chains = 4, iter = 2000, warmup = floor(iter / 2),ran.wal.sd) {
nvars <- ncol(x); nobs <- nrow(x)
dn <- colnames(x); if (is.null(dn)) dn <- paste0("x", 1L:nvars)
if (is.null(prior_coef))
prior_coef <- list(mean = rep(0, nvars), precision = rep(0, nvars))
if (is.null(prior_disp))
prior_disp <- list(df = 0, scale = 0)
S_inv0 <- prior_coef$precision
beta0 <- prior_coef$mean
beta0 <- if (is.vector(S_inv0)) S_inv0 * beta0 else S_inv0 %*% beta0
nu <- prior_disp$df
nu_tau2 <- nu * prior_disp$scale
rho0 = 0.1
rrho0 = rho.bui(rho = rho0,n = nobs)
c = chol(rrho0)
cp = solve(t(c))
y.t = cp %*% y
x.t = cp %*% x
rss <- sum((y.t - mean(y.t)) ^ 2)
sigma2 <- (nu_tau2 + rss) / (nu + nobs)
sims <- mcmc_array(iter - warmup, chains, c(dn, "sigma", "lp__", "Rho","Rep_y"))
for (chain in 1:chains) {
for (it in 1:iter) {
z <- crossprod(x.t, y.t) / sigma2 + beta0
V_inv <- crossprod(x.t) / sigma2
if (is.vector(S_inv0)) # diagonal precision?
diag(V_inv) <- diag(V_inv) + S_inv0
else
V_inv <- V_inv + S_inv0
c =  C <- chol(V_inv)
u <- backsolve(C, z, transpose = TRUE)
coef <- drop(backsolve(C, u + rnorm(nvars)))
rss <- sum((y.t - drop(x.t %*% coef)) ^ 2)
sigma2 <- rinvchisq(1, nu + nobs, nu_tau2 + rss)
ratio = ratio(rho0 = rho0,sigma = sigma2,beta = coef,x = x,y = y,ran.wal.sd = ran.wal.sd)
a = runif(1)
if(ratio$ratio >a){
rho0 = ratio$rho1
}
rrho0 = rho.bui(rho = rho0,n = nobs)
c = chol(rrho0)
cp = solve(t(c))
y.t = cp %*% y
x.t = cp %*% x
repy = x%*%coef
lp <- -((nu + nobs) / 2 + 1) * log(sigma2) - .5 * (nu_tau2 + rss) / sigma2
if (it > warmup)
sims[it - warmup, chain, ] <- c(coef, sqrt(sigma2), lp, rho0,repy)
}
}
sims
}
stroke = read.csv("stroke.csv")
x = model.matrix(data = stroke,score~week)
y = stroke$score
sims = bslm_sample(y = y,x = x,ran.wal.sd = 0.0001)
bslm_sample <- function (y, x, prior_coef = NULL, prior_disp = NULL,
chains = 4, iter = 2000, warmup = floor(iter / 2),ran.wal.sd) {
nvars <- ncol(x); nobs <- nrow(x)
dn <- colnames(x); if (is.null(dn)) dn <- paste0("x", 1L:nvars)
if (is.null(prior_coef))
prior_coef <- list(mean = rep(0, nvars), precision = rep(0, nvars))
if (is.null(prior_disp))
prior_disp <- list(df = 0, scale = 0)
S_inv0 <- prior_coef$precision
beta0 <- prior_coef$mean
beta0 <- if (is.vector(S_inv0)) S_inv0 * beta0 else S_inv0 %*% beta0
nu <- prior_disp$df
nu_tau2 <- nu * prior_disp$scale
rho0 = 0.1
rrho0 = rho.bui(rho = rho0,n = nobs)
c = chol(rrho0)
cp = solve(t(c))
y.t = cp %*% y
x.t = cp %*% x
rss <- sum((y.t - mean(y.t)) ^ 2)
sigma2 <- (nu_tau2 + rss) / (nu + nobs)
sims <- mcmc_array(iter - warmup, chains, c(dn, "sigma", "lp__", "Rho"))
repy = matrix(nrow = nobs,ncol = iter - warmup)
for (chain in 1:chains) {
for (it in 1:iter) {
z <- crossprod(x.t, y.t) / sigma2 + beta0
V_inv <- crossprod(x.t) / sigma2
if (is.vector(S_inv0)) # diagonal precision?
diag(V_inv) <- diag(V_inv) + S_inv0
else
V_inv <- V_inv + S_inv0
c =  C <- chol(V_inv)
u <- backsolve(C, z, transpose = TRUE)
coef <- drop(backsolve(C, u + rnorm(nvars)))
rss <- sum((y.t - drop(x.t %*% coef)) ^ 2)
sigma2 <- rinvchisq(1, nu + nobs, nu_tau2 + rss)
ratio = ratio(rho0 = rho0,sigma = sigma2,beta = coef,x = x,y = y,ran.wal.sd = ran.wal.sd)
a = runif(1)
if(ratio$ratio >a){
rho0 = ratio$rho1
}
rrho0 = rho.bui(rho = rho0,n = nobs)
c = chol(rrho0)
cp = solve(t(c))
y.t = cp %*% y
x.t = cp %*% x
repy = x%*%coef
lp <- -((nu + nobs) / 2 + 1) * log(sigma2) - .5 * (nu_tau2 + rss) / sigma2
if (it > warmup)
sims[it - warmup, chain, ] <- c(coef, sqrt(sigma2), lp, rho0)
repy[,it - warmup] = x%*%coef
}
}
return(list(sims = sims,repy = repy))
}
stroke = read.csv("stroke.csv")
x = model.matrix(data = stroke,score~week)
y = stroke$score
sims = bslm_sample(y = y,x = x,ran.wal.sd = 0.0001)
rstanarm::stan_lmer(data = stroke,formula = score~week + (1|subject))
rstanarm::stan_lmer(data = stroke,formula = score~week + (1|subject))
rstanarm::stan_glmer(data = stroke,formula = score~week + (1|subject))
mo2 = rstanarm::stan_glmer(data = stroke,formula = score~week + (1|subject))
rstanarm::pp_check(mo2)
rstanarm::pp_check(mo2)
rstanarm::pp_check(mo1)
view(sims)
a = sims[,1,]
View(a)
a = a[,-c(4,5)]
a = a[,-3]
bslm_sample <- function (y, x, prior_coef = NULL, prior_disp = NULL,
chains = 4, iter = 2000, warmup = floor(iter / 2),ran.wal.sd) {
nvars <- ncol(x); nobs <- nrow(x)
dn <- colnames(x); if (is.null(dn)) dn <- paste0("x", 1L:nvars)
if (is.null(prior_coef))
prior_coef <- list(mean = rep(0, nvars), precision = rep(0, nvars))
if (is.null(prior_disp))
prior_disp <- list(df = 0, scale = 0)
S_inv0 <- prior_coef$precision
beta0 <- prior_coef$mean
beta0 <- if (is.vector(S_inv0)) S_inv0 * beta0 else S_inv0 %*% beta0
nu <- prior_disp$df
nu_tau2 <- nu * prior_disp$scale
rho0 = 0.1
rrho0 = rho.bui(rho = rho0,n = nobs)
c = chol(rrho0)
cp = solve(t(c))
y.t = cp %*% y
x.t = cp %*% x
rss <- sum((y.t - mean(y.t)) ^ 2)
sigma2 <- (nu_tau2 + rss) / (nu + nobs)
sims <- mcmc_array(iter - warmup, chains, c(dn, "sigma", "lp__", "Rho"))
repy = matrix(nrow = nobs,ncol = iter - warmup)
for (chain in 1:chains) {
for (it in 1:iter) {
z <- crossprod(x.t, y.t) / sigma2 + beta0
V_inv <- crossprod(x.t) / sigma2
if (is.vector(S_inv0)) # diagonal precision?
diag(V_inv) <- diag(V_inv) + S_inv0
else
V_inv <- V_inv + S_inv0
c =  C <- chol(V_inv)
u <- backsolve(C, z, transpose = TRUE)
coef <- drop(backsolve(C, u + rnorm(nvars)))
rss <- sum((y.t - drop(x.t %*% coef)) ^ 2)
sigma2 <- rinvchisq(1, nu + nobs, nu_tau2 + rss)
ratio = ratio(rho0 = rho0,sigma = sigma2,beta = coef,x = x,y = y,ran.wal.sd = ran.wal.sd)
a = runif(1)
if(ratio$ratio >a){
rho0 = ratio$rho1
}
rrho0 = rho.bui(rho = rho0,n = nobs)
c = chol(rrho0)
cp = solve(t(c))
y.t = cp %*% y
x.t = cp %*% x
lp <- -((nu + nobs) / 2 + 1) * log(sigma2) - .5 * (nu_tau2 + rss) / sigma2
if (it > warmup)
sims[it - warmup, chain, ] <- c(coef, sqrt(sigma2), lp, rho0)
repy[,it - warmup] = x %*% coef
}
}
return(list(sims = sims,repy = repy))
}
x%*%coef
dim(x%*%coef)
nvars <- ncol(x); nobs <- nrow(x)
nvars <- ncol(x); nobs <- nrow(x)
repy = matrix(nrow = nobs,ncol = iter - warmup)
iter = 2000
warmup = floor(iter / 2)
repy = matrix(nrow = nobs,ncol = iter - warmup)
dim(y)
View(repy)
ncol(y)
repy[,1] = x%*%coef
View(repy)
View(a)
a = a[20,]
View(beta)
view(a)
a = sims[,1,]
a= a[1:20,1:2]
View(a)
a = t(a)
View(a)
y = x%*% a
View(y)
y = data.frame(y)
y = y %>% mutate(obs = stroke$score)
y = y %>% pivot_longer(cols = 1:21,names_to = "type",values_to = "value")
y = y %>% mutate(observe = ifelse(y$type == "obs","Observe","Replicated"))
ggplot(y) + geom_density(aes(y = value,color = observe,group = type.convert()))
ggplot(y) + geom_density(aes(x = value,color = observe,group = type.convert()))
ggplot(y) + geom_density(aes(x = value,color = observe,group = type))
a = sims[,1,]
a = sims[,1,]
a= a[980:1000,1:2]
View(a)
a = t(a)
View(a)
y = x%*% a
View(y)
y = data.frame(y)
y = y % % mutate(obs = stroke$score)
a = sims[,1,]
a= a[980:1000,1:2]
View(a)
a = t(a)
y = x%*% a
View(y)
y = data.frame(y)
y = y % % mutate(obs = stroke$score)
a = sims[,1,]
a= a[980:1000,1:2]
View(a)
a = t(a)
y = x%*% a
y = data.frame(y)
y = y % % mutate(obs = stroke$score)
a = sims[,1,]
a= a[980:1000,1:2]
a = t(a)
y = x%*% a
y = data.frame(y)
y = y % % mutate(obs = stroke$score)
a = sims[,1,]
a= a[980:1000,1:2]
a = t(a)
y = x%*% a
y = data.frame(y)
y = y %>% mutate(obs = stroke$score)
y = y %>% pivot_longer(cols = 1:21,names_to = "type",values_to = "value")
y = y %>% mutate(observe = ifelse(y$type == "obs","Observe","Replicated"))
ggplot(y) + geom_density(aes(y = value,color = observe,group = type.convert()))
a = sims[,1,]
a= a[980:1000,1:2]
a = t(a)
y = x%*% a
y = data.frame(y)
y = y %>% mutate(obs = stroke$score)
y = y %>% pivot_longer(cols = 1:21,names_to = "type",values_to = "value")
y = y %>% mutate(observe = ifelse(y$type == "obs","Observe","Replicated"))
ggplot(y) + geom_density(aes(y = value,color = observe,group = type))
a = sims[,1,]
a= a[980:1000,1:2]
a = t(a)
y = x%*% a
y = data.frame(y)
y = y %>% mutate(obs = stroke$score)
y = y %>% pivot_longer(cols = 1:21,names_to = "type",values_to = "value")
y = y %>% mutate(observe = ifelse(y$type == "obs","Observe","Replicated"))
ggplot(y) + geom_density(aes(x = value,color = observe,group = type))
a = sims[,1,]
a= a[980:1000,1:2]
a = t(a)
y = x%*% a
y = data.frame(y)
y = y %>% mutate(obs = stroke$score)
View(y)
a = sims[,1,]
a= a[981:1000,1:2]
a = t(a)
y = x%*% a
y = data.frame(y)
y = y %>% mutate(obs = stroke$score)
y = y %>% pivot_longer(cols = 1:21,names_to = "type",values_to = "value")
y = y %>% mutate(observe = ifelse(y$type == "obs","Observe","Replicated"))
ggplot(y) + geom_density(aes(x = value,color = observe,group = type))
ggplot(y) + geom_density(aes(x = value,color = observe,group = type))
a = sims[,1,]
View(a)
a = a[,1:2]
View(a)
View(a)
a = a[,1:2] %>% data.frame()
View(a)
a = a %>% mutate(id = 1:1000)
a = a %>% mutate(id = cut(id,breaks = 20))
a = sims[,1,]
a = a[,1:2] %>% data.frame()
a = a %>% mutate(id = 1:1000)
a = a %>% mutate(id = cut(id,breaks = 20,labels = F))
colnames(a) = c("a","b")
colnames(a) = c("a","b","id")
a = a %>% group_by(id) %>% summarise(a = mean(a),b = mean(b))
a = a %>% group_by(id) %>% summarise(a = mean(a),b = mean(b)) %>% select(-id)
a = t(a)
y = x%*% a
y = data.frame(y)
y = y %>% mutate(obs = stroke$score)
y = y %>% pivot_longer(cols = 1:21,names_to = "type",values_to = "value")
y = y %>% mutate(observe = ifelse(y$type == "obs","Observe","Replicated"))
ggplot(y) + geom_density(aes(x = value,color = observe,group = type))
ggplot(y) + geom_density(aes(x = value,color = observe,group = type))
View(a)
uhat <- (y - drop(x %*% a[,1])) / 22.7
uhat <- (y - drop(x %*% as.matrix(a[,1]))) / 22.7
a[,1]
as.matrix(a[,1])
x %*% as.matrix(a[,1])
drop(x %*% as.matrix(a[,1]))
y - drop(x %*% as.matrix(a[,1]))
drop(x %*% as.matrix(a[,1]))
as.numeric(drop(x %*% as.matrix(a[,1])))
uhat <- (y - as.numeric(drop(x %*% as.matrix(a[,1])))) / 22.7
as.numeric(drop(x %*% as.matrix(a[,1])))
y - as.numeric(drop(x %*% as.matrix(a[,1])))
y
y = stroke$score
uhat <- (y - as.numeric(drop(x %*% as.matrix(a[,1])))) / 22.7
uhat
ns <- dim(sims)[1]
u <- matrix(nrow = ns, ncol = n)
yhat <- matrix(nrow = ns, ncol = n)
for (s in 1:ns) {
yhat[s,] <- drop(X %*% sims[s, 1, 1:p]) # fitted values
u[s,] <- (y - yhat[s,]) / sims[s, 1, p + 1] # standardized residuals
}
for (s in 1:ns) {
yhat[s,] <- drop(x %*% sims[s, 1, 1:p]) # fitted values
u[s,] <- (y - yhat[s,]) / sims[s, 1, p + 1] # standardized residuals
}
for (s in 1:ns) {
yhat[s,] <- drop(x %*% sims[s, 1, 1:2]) # fitted values
u[s,] <- (y - yhat[s,]) / sims[s, 1, 2 + 1] # standardized residuals
}
outlier_threshold <- function (ntests = 1, alpha = .05)
outlier_threshold <- function (ntests = 1, alpha = .05)-qnorm(.5 * (1 - (1 - alpha) ^ (1 / ntests)))
#k <- outlier_threshold(1) # very liberal
k <- outlier_threshold(n)
boxplot(u, outline = FALSE)
abline(h = 0, lty = 3); abline(h = c(-k, k), lty = 2, col = "red")
boxplot(u, outline = FALSE)
abline(h = 0, lty = 3); abline(h = c(-k, k), lty = 2, col = "red")
boxplot(u, outline = FALSE)
abline(h = 0, lty = 3); abline(h = c(-k, k), lty = 2, col = "red")
plot(c(yhat), c(u), pch = 20, col = "#dfdfdf1a",
xlab = "Fitted values", ylab = "Standardized residuals")
points(drop(X %*% fit$coef), uhat, pch = 3)
abline(h = 0, lty = 3); abline(h = c(-k, k), lty = 2, col = "red")
lines(lowess(c(yhat), c(u)), col = "red")
prob_outlier <- apply(u, 2, function (ui) mean(abs(ui) > k))
names(prob_outlier) <- 1:n
idx <- order(prob_outlier, decreasing = TRUE)
print(prob_outlier[idx])
op <- par(mfrow = c(3, 3))
for (i in idx[1:9]) {
plot_hist(u[, i], main = i)
abline(v = uhat[i], lwd = 2)
abline(v = c(-k, k), lty = 2, col = "red")
}
par(op)
#k <- outlier_threshold(1) # very liberal
k <- outlier_threshold(n) # very conservative, close to Bonferroni
n = 192
#k <- outlier_threshold(1) # very liberal
k <- outlier_threshold(n) # very conservative, close to Bonferroni
# Bayesian residual plots:
outlier_threshold <- function {(ntests = 1, alpha = .05)-qnorm(.5 * (1 - (1 - alpha) ^ (1 / ntests)))}
# Bayesian residual plots:
outlier_threshold <- function (ntests = 1, alpha = .05)
{-qnorm(.5 * (1 - (1 - alpha) ^ (1 / ntests)))}
#k <- outlier_threshold(1) # very liberal
k <- outlier_threshold(n) # very conservative, close to Bonferroni
boxplot(u, outline = FALSE)
abline(h = 0, lty = 3); abline(h = c(-k, k), lty = 2, col = "red")
stroke = read.csv("stroke.csv")
x = model.matrix(data = stroke,~week+group+week:group)
View(x)
p <- ncol(x); n <- length(y)
nu <- tau2 <- 0
beta0 <- rep(0, p); Sigma0 <- chol2inv(chol(crossprod(x)))
x0 <- model.matrix(~ county + firstfloor, data = radon)
x0 <- model.matrix(~week+group, data = stroke)
p0 <- ncol(x0); ind0 <- 1:p0
Sigma0_null <- chol2inv(chol(crossprod(x0)))
m <- 100
g <- seq(0, n, length=m + 1)[-1]
BF <- numeric(m)
for (i in 1:m) {
l1 <- log_marg_y(y, x, beta0, g[i] * Sigma0, nu, nu * tau2) # log(P(y|z_1))
l0 <- log_marg_y(y, x[, ind0], beta0[ind0], g[i] * Sigma0_null,
nu, nu * tau2) # log(P(y|z_0))
BF[i] <- exp(l1 - l0)
}
log_marg_y <- function (y, x, beta0, Sigma0, nu, nu_tau2) {
n <- length(y)
C <- chol(diag(n) + x %*% tcrossprod(Sigma0, x))
v <- crossprod(backsolve(C, y - x %*% as.matrix(beta0), transpose = TRUE))
-sum(log(diag(C))) - (nu + n) / 2 * log(nu_tau2 + v)
}
for (i in 1:m) {
l1 <- log_marg_y(y, x, beta0, g[i] * Sigma0, nu, nu * tau2) # log(P(y|z_1))
l0 <- log_marg_y(y, x[, ind0], beta0[ind0], g[i] * Sigma0_null,
nu, nu * tau2) # log(P(y|z_0))
BF[i] <- exp(l1 - l0)
}
plot(g, BF, type = "l")
plot(g, BF, type = "l")
gamma <- 1; alpha <- .5
pH0 <- 1 - alpha
abline(h = gamma * pH0 / (1 - pH0), col = "red")
plot(g, BF, type = "l")
gamma <- 1; alpha <- .5
pH0 <- 1 - alpha
abline(h = gamma * pH0 / (1 - pH0), col = "red")
abline(v = g[which.max(bf)], lty = 2)
plot(g, BF, type = "l")
gamma <- 1; alpha <- .5
pH0 <- 1 - alpha
abline(h = gamma * pH0 / (1 - pH0), col = "red")
abline(v = g[which.max(BF)], lty = 2)
Sigma0_null
